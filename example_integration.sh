#!/usr/bin/env bash

# Example integration script for Claude Code hooks with Redis
# This shows how to integrate the claude_hook_redis.sh script with Claude Code

set -euo pipefail

# Configuration
readonly HOOKS_DIR="$HOME/.claude/hooks"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly REDIS_SCRIPT="$SCRIPT_DIR/claude_hook_redis.sh"
readonly CONFIG_FILE="$HOME/.claude/redis_config.env"

# Colors for output
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly NC='\033[0m'

# Create configuration file
create_config() {
    echo -e "${YELLOW}Creating Redis configuration...${NC}"
    
    if [[ -f "$CONFIG_FILE" ]]; then
        echo -e "${YELLOW}Config file already exists at $CONFIG_FILE${NC}"
        read -p "Overwrite? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            return
        fi
    fi
    
    # Prompt for Redis configuration
    read -p "Redis Host: " redis_host
    read -s -p "Redis Password: " redis_password
    echo
    read -p "Redis Port [6380]: " redis_port
    redis_port="${redis_port:-6380}"
    read -p "Use TLS? (true/false) [true]: " redis_tls
    redis_tls="${redis_tls:-true}"
    
    # Write configuration
    cat > "$CONFIG_FILE" << EOF
# Redis Configuration for Claude Hooks
export REDIS_HOST="$redis_host"
export REDIS_PASSWORD="$redis_password"
export REDIS_PORT="$redis_port"
export REDIS_TLS="$redis_tls"
export REDIS_PERSIST="true"
export CLAUDE_HOOKS_LOG="$HOME/.claude/logs/hooks.log"
export CLAUDE_HOOKS_SEQ="$HOME/.claude/.sequence"
EOF
    
    chmod 600 "$CONFIG_FILE"
    echo -e "${GREEN}Configuration saved to $CONFIG_FILE${NC}"
}

# Install hook scripts
install_hooks() {
    echo -e "${YELLOW}Installing Claude Code hooks...${NC}"
    
    # Create directories
    mkdir -p "$HOOKS_DIR"
    mkdir -p "$HOME/.claude/logs"
    
    # Check if Redis script exists
    if [[ ! -f "$REDIS_SCRIPT" ]]; then
        echo -e "${RED}Error: Redis script not found at $REDIS_SCRIPT${NC}"
        exit 1
    fi
    
    # Hook types to install
    local hooks=(
        "session_start"
        "user_prompt_submit"
        "pre_tool_use"
        "post_tool_use"
        "notification"
        "stop_hook"
        "sub_agent_stop_hook"
        "pre_compact"
    )
    
    # Create a wrapper script for each hook
    for hook in "${hooks[@]}"; do
        local hook_file="$HOOKS_DIR/${hook}.sh"
        
        echo -e "Installing hook: ${hook}"
        
        cat > "$hook_file" << 'EOF'
#!/usr/bin/env bash
# Claude Code Hook: HOOK_NAME
# Auto-generated by example_integration.sh

set -euo pipefail

# Load configuration
CONFIG_FILE="$HOME/.claude/redis_config.env"
if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
else
    echo "Error: Redis configuration not found at $CONFIG_FILE" >&2
    exit 1
fi

# Generate or retrieve session ID
if [[ -z "${CLAUDE_SESSION_ID:-}" ]]; then
    # Try to get from a session file or generate new one
    SESSION_FILE="$HOME/.claude/.current_session"
    if [[ -f "$SESSION_FILE" ]]; then
        CLAUDE_SESSION_ID=$(cat "$SESSION_FILE")
    else
        CLAUDE_SESSION_ID="claude-$(date +%Y%m%d-%H%M%S)-$$"
        echo "$CLAUDE_SESSION_ID" > "$SESSION_FILE"
    fi
fi

# Read hook data from stdin
HOOK_DATA=$(cat)

# Log the hook invocation (optional)
if [[ "${CLAUDE_HOOKS_DEBUG:-0}" == "1" ]]; then
    echo "[$(date -u +%Y-%m-%dT%H:%M:%SZ)] Hook: HOOK_NAME, Session: $CLAUDE_SESSION_ID" >> "$HOME/.claude/logs/hooks_debug.log"
    echo "$HOOK_DATA" >> "$HOME/.claude/logs/hooks_debug.log"
fi

# Send to Redis
echo "$HOOK_DATA" | "REDIS_SCRIPT_PATH" "HOOK_NAME" "$CLAUDE_SESSION_ID"

# Pass through the data (important for Claude Code to continue)
echo "$HOOK_DATA"
EOF
        
        # Replace placeholders
        sed -i.bak "s|HOOK_NAME|${hook}|g" "$hook_file"
        sed -i.bak "s|REDIS_SCRIPT_PATH|${REDIS_SCRIPT}|g" "$hook_file"
        rm -f "${hook_file}.bak"
        
        # Make executable
        chmod +x "$hook_file"
    done
    
    echo -e "${GREEN}Hooks installed successfully in $HOOKS_DIR${NC}"
}

# Test Redis connection
test_connection() {
    echo -e "${YELLOW}Testing Redis connection...${NC}"
    
    # Load configuration
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    else
        echo -e "${RED}Error: Configuration not found. Run setup first.${NC}"
        return 1
    fi
    
    # Test connection
    if redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" \
        ${REDIS_TLS:+--tls} \
        --pass "$REDIS_PASSWORD" ping >/dev/null 2>&1; then
        echo -e "${GREEN}✓ Redis connection successful${NC}"
        return 0
    else
        echo -e "${RED}✗ Redis connection failed${NC}"
        return 1
    fi
}

# Send test hook
send_test_hook() {
    echo -e "${YELLOW}Sending test hook...${NC}"
    
    # Load configuration
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    else
        echo -e "${RED}Error: Configuration not found. Run setup first.${NC}"
        return 1
    fi
    
    # Send test notification
    local test_session="test-$(date +%s)"
    local test_payload='{
        "message": "Test hook from Claude Code integration",
        "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
        "test": true
    }'
    
    echo "$test_payload" | "$REDIS_SCRIPT" "notification" "$test_session"
    
    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}✓ Test hook sent successfully${NC}"
        echo "Session ID: $test_session"
        echo "Check Redis channel 'hooksdata' for the message"
    else
        echo -e "${RED}✗ Failed to send test hook${NC}"
    fi
}

# Monitor Redis channel
monitor_hooks() {
    echo -e "${YELLOW}Monitoring Redis channel 'hooksdata'...${NC}"
    echo "Press Ctrl+C to stop"
    
    # Load configuration
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    else
        echo -e "${RED}Error: Configuration not found. Run setup first.${NC}"
        return 1
    fi
    
    # Subscribe to channel
    redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" \
        ${REDIS_TLS:+--tls} \
        --pass "$REDIS_PASSWORD" \
        SUBSCRIBE hooksdata
}

# Uninstall hooks
uninstall_hooks() {
    echo -e "${YELLOW}Uninstalling Claude Code hooks...${NC}"
    
    read -p "This will remove all hook scripts. Continue? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        return
    fi
    
    # Remove hook scripts
    if [[ -d "$HOOKS_DIR" ]]; then
        rm -f "$HOOKS_DIR"/*.sh
        echo -e "${GREEN}Hooks removed${NC}"
    fi
    
    # Optionally remove configuration
    read -p "Also remove Redis configuration? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -f "$CONFIG_FILE"
        rm -f "$HOME/.claude/.current_session"
        echo -e "${GREEN}Configuration removed${NC}"
    fi
}

# Show status
show_status() {
    echo -e "${YELLOW}Claude Code Redis Integration Status${NC}"
    echo "======================================"
    
    # Check configuration
    if [[ -f "$CONFIG_FILE" ]]; then
        echo -e "${GREEN}✓${NC} Configuration exists"
        source "$CONFIG_FILE"
        echo "  Redis Host: $REDIS_HOST"
        echo "  Redis Port: $REDIS_PORT"
        echo "  TLS Enabled: $REDIS_TLS"
    else
        echo -e "${RED}✗${NC} Configuration not found"
    fi
    
    # Check hooks
    if [[ -d "$HOOKS_DIR" ]]; then
        local hook_count=$(ls -1 "$HOOKS_DIR"/*.sh 2>/dev/null | wc -l)
        if [[ $hook_count -gt 0 ]]; then
            echo -e "${GREEN}✓${NC} Hooks installed: $hook_count"
            ls -1 "$HOOKS_DIR"/*.sh | while read hook; do
                echo "  - $(basename "$hook" .sh)"
            done
        else
            echo -e "${RED}✗${NC} No hooks installed"
        fi
    else
        echo -e "${RED}✗${NC} Hooks directory not found"
    fi
    
    # Check Redis script
    if [[ -f "$REDIS_SCRIPT" ]]; then
        echo -e "${GREEN}✓${NC} Redis script available"
    else
        echo -e "${RED}✗${NC} Redis script not found"
    fi
    
    # Test connection
    if [[ -f "$CONFIG_FILE" ]]; then
        echo -n "Redis connection: "
        if test_connection >/dev/null 2>&1; then
            echo -e "${GREEN}✓ Connected${NC}"
        else
            echo -e "${RED}✗ Failed${NC}"
        fi
    fi
}

# Main menu
main_menu() {
    while true; do
        echo ""
        echo "Claude Code Redis Integration"
        echo "=============================="
        echo "1) Setup Redis configuration"
        echo "2) Install hooks"
        echo "3) Test connection"
        echo "4) Send test hook"
        echo "5) Monitor hooks (live)"
        echo "6) Show status"
        echo "7) Uninstall hooks"
        echo "8) Exit"
        echo ""
        read -p "Select option: " choice
        
        case $choice in
            1) create_config ;;
            2) install_hooks ;;
            3) test_connection ;;
            4) send_test_hook ;;
            5) monitor_hooks ;;
            6) show_status ;;
            7) uninstall_hooks ;;
            8) exit 0 ;;
            *) echo -e "${RED}Invalid option${NC}" ;;
        esac
    done
}

# Handle command line arguments
case "${1:-}" in
    setup)
        create_config
        install_hooks
        test_connection
        ;;
    install)
        install_hooks
        ;;
    test)
        test_connection
        send_test_hook
        ;;
    monitor)
        monitor_hooks
        ;;
    status)
        show_status
        ;;
    uninstall)
        uninstall_hooks
        ;;
    *)
        main_menu
        ;;
esac